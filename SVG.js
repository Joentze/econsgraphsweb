class SVG {
  constructor() {
    this.file;
    this.filewidth;
    this.fileheight;
  }

  writeToSVG() {
    this.file = new Array(0);
    this.filewidth = int(w.w + u / 2);
    this.fileheight = int(w.h + u / 2);
    this.beginSVG();
    this.renderAxes();
    this.renderFills();
    this.renderLines();
    this.renderText();
    this.endSVG();
    //saveStrings(path, file);
    //println(join(file, "\n"));
    //copyToClipboard(join(file, "\n"));
    return this.file.join("\n");
  }

  beginSVG() {
    this.file = append(this.file, "<?xml version='1.0'?>");
    this.file = append(
      this.file,
      "<!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.0//EN'"
    );
    this.file = append(
      this.file,
      "'http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd'>"
    );
    this.file = append(
      this.file,
      "<svg xmlns:xlink='http://www.w3.org/1999/xlink' style='fill-opacity:1; color-rendering:auto; color-interpolation:auto; text-rendering:auto; stroke:black; stroke-linecap:square; stroke-miterlimit:10; shape-rendering:auto; stroke-opacity:1; fill:black; stroke-dasharray:none; font-weight:normal; stroke-width:1; font-family:" +
        "Arial" +
        "; font-style:normal; stroke-linejoin:miter; font-size:12px; stroke-dashoffset:0; image-rendering:auto;' width='" +
        this.filewidth +
        "' height='" +
        this.fileheight +
        "' xmlns='http://www.w3.org/2000/svg'"
    );
    this.file = append(this.file, "");

    this.file = append(this.file, "><!--Generated by Lim Shao En-->");
    this.file = append(
      this.file,
      `<defs>
    <marker id="arrow" markerWidth="120" markerHeight="120" refX="12" refY="6" orient="auto" markerUnits="strokeWidth">
    <path d="M 0,0 L 12,6 l -12,6" fill-opacity='0'/>
    </marker>
    </defs>`
    );
  }

  renderAxes() {
    this.file = append(
      this.file,
      "<g style='stroke-linecap:round; stroke-width:1.5; fill:none'>"
    );

    this.file = append(
      this.file,
      "<line x1='" +
        this.toAbs(0, 0) +
        "' y1='" +
        this.toAbs(0, 1) +
        "' x2='" +
        this.toAbs(0, 0) +
        "' y2='" +
        this.toAbs(w.h - 3 * w.m, 1) +
        "' marker-end='url(#arrow)'/>"
    );
    this.file = append(
      this.file,
      "<line x1='" +
        this.toAbs(0, 0) +
        "' y1='" +
        this.toAbs(0, 1) +
        "' x2='" +
        this.toAbs(w.w - 10 * w.m, 0) +
        "' y2='" +
        this.toAbs(0, 1) +
        "' marker-end='url(#arrow)'/>"
    );

    this.file = append(this.file, "</g>");
  }

  renderLines() {
    this.file = append(
      this.file,
      "<g style='stroke-linecap:round; stroke-width:1.5; fill:none'>"
    );
    for (var l of Object.values(lines)) {
      if (l.type == 0) {
        if (l.n == 1) {
          this.file = append(
            this.file,
            "<line x1='" +
              this.toAbs(l.p[0].x, 0) +
              "' y1='" +
              this.toAbs(l.p[0].y, 1) +
              "' x2='" +
              this.toAbs(l.p[1].x, 0) +
              "' y2='" +
              this.toAbs(l.p[1].y, 1) +
              "'/>"
          );
        } else if (l.n == 2) {
          this.file = append(
            this.file,
            "<path d='M " +
              this.toAbs(l.p[0].x, 0) +
              " " +
              this.toAbs(l.p[0].y, 1) +
              " Q" +
              this.toAbs(l.p[1].x, 0) +
              " " +
              this.toAbs(l.p[1].y, 1) +
              ", " +
              this.toAbs(l.p[2].x, 0) +
              " " +
              this.toAbs(l.p[2].y, 1) +
              "'/>"
          );
        } else if (l.n == 3) {
          this.file = append(
            this.file,
            "<path d='M " +
              this.toAbs(l.p[0].x, 0) +
              " " +
              this.toAbs(l.p[0].y, 1) +
              " C" +
              this.toAbs(l.p[1].x, 0) +
              " " +
              this.toAbs(l.p[1].y, 1) +
              ", " +
              this.toAbs(l.p[2].x, 0) +
              " " +
              this.toAbs(l.p[2].y, 1) +
              ", " +
              this.toAbs(l.p[3].x, 0) +
              " " +
              this.toAbs(l.p[3].y, 1) +
              "'/>"
          );
        }
      } else if (l.type == 1) {
        this.file = append(this.file, "<g>");
        this.file = append(
          this.file,
          "<line x1='" +
            this.toAbs(l.p[0].x, 0) +
            "' y1='" +
            this.toAbs(l.p[0].y, 1) +
            "' x2='" +
            this.toAbs(l.p[1].x - l.asr, 0) +
            "' y2='" +
            this.toAbs(l.p[0].y, 1) +
            "'/>"
        );
        this.file = append(
          this.file,
          "<line x1='" +
            this.toAbs(l.p[1].x, 0) +
            "' y1='" +
            this.toAbs(l.p[1].y, 1) +
            "' x2='" +
            this.toAbs(l.p[1].x, 0) +
            "' y2='" +
            this.toAbs(l.p[0].y + l.asr, 1) +
            "'/>"
        );
        this.file = append(
          this.file,
          "<path d='M " +
            this.toAbs(l.p[1].x - l.asr, 0) +
            " " +
            this.toAbs(l.p[0].y, 1) +
            " A" +
            l.asr +
            " " +
            l.asr +
            ", 0,0,0," +
            this.toAbs(l.p[1].x, 0) +
            " " +
            this.toAbs(l.p[0].y + l.asr, 1) +
            "'/>"
        );
        this.file = append(this.file, "</g>");
      }
    }

    for (var p of Object.values(points)) {
      for (var l of Object.values(p.ls)) {
        for (var x of Object.values(p.ps)) {
          for (var k of Object.values(x.ls)) {
            if (k.exselected && x.selected) {
              this.file = append(
                this.file,
                "<line style='stroke-width:0.75;' stroke-dasharray='10' x1='" +
                  this.toAbs(k.p[1].x, 0) +
                  "' y1='" +
                  this.toAbs(k.p[1].y, 1) +
                  "' x2='" +
                  this.toAbs(k.p[0].x, 0) +
                  "' y2='" +
                  this.toAbs(k.p[0].y, 1) +
                  "'/>"
              );
            }
          }
        }
        if (l.exselected && p.selected) {
          this.file = append(
            this.file,
            "<line style='stroke-width:0.75;' stroke-dasharray='10' x1='" +
              this.toAbs(l.p[1].x, 0) +
              "' y1='" +
              this.toAbs(l.p[1].y, 1) +
              "' x2='" +
              this.toAbs(l.p[0].x, 0) +
              "' y2='" +
              this.toAbs(l.p[0].y, 1) +
              "'/>"
          );
        }
      }
    }
    this.file = append(this.file, "</g>");
  }

  renderText() {
    this.file = append(
      this.file,
      "<g style='stroke-width:0;' fill = 'black' font-size = '20' font-family='Arial' alignment-baseline='hanging' stroke='none'>"
    );

    for (var tb of Object.values(tbs)) {
      this.file = append(
        this.file,
        "<text x = '" +
          this.toAbs(tb.x + 2, 0) +
          "' y = '" +
          this.toAbs(tb.y - 19, 1) +
          "' >"
      );
      this.file = append(this.file, "<tspan>");
      this.file = append(this.file, tb.input.value());
      this.file = append(this.file, "</tspan>");
      this.file = append(this.file, "</text>");
    }
    this.file = append(this.file, "</g>");
  }

  renderFills() {
    for (var f of Object.values(fills)) {
      let polycolor = `${f.c.levels[0]},${f.c.levels[1]},${f.c.levels[2]}`;
      console.log(polycolor);
      let polypoints = "";
      for (var p of Object.values(f.psv)) {
        polypoints += this.toAbs(p.x, 0) + "," + this.toAbs(p.y, 1) + " ";
      }
      this.file = append(
        this.file,
        `<polygon points="${polypoints}" style="fill:rgb(${polycolor});fill-opacity:50%;stroke-width:0" />`
      );
    }
  }

  endSVG() {
    this.file = append(this.file, "</svg>");
  }

  toAbs(val, dim) {
    if (dim == 0) {
      return w.x + 3 * w.m + val - u / 2;
    } else if (dim == 1) {
      return this.fileheight - w.m - val - u / 2;
    }
    return val;
  }
}
